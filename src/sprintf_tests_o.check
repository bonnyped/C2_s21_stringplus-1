#suite s21_sprintf_tests_o

#test test_o1
unsigned int a = 8;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%o", a), sprintf(resorig, "%o", a));
ck_assert_pstr_eq(res, resorig);

#test test_o2
unsigned int a = 8;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%10o", a), sprintf(resorig, "%10o", a));
ck_assert_pstr_eq(res, resorig);

#test test_o3
unsigned int a = 8;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%010o", a), sprintf(resorig, "%010o", a));
ck_assert_pstr_eq(res, resorig);

#test test_o4
unsigned int a = 8;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%-10o", a), sprintf(resorig, "%-10o", a));
ck_assert_pstr_eq(res, resorig);

#test test_o5
unsigned int a = 8;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%.0o", a), sprintf(resorig, "%.0o", a));
ck_assert_pstr_eq(res, resorig);

#test test_o6
unsigned int a = 8;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%.1o", a), sprintf(resorig, "%.1o", a));
ck_assert_pstr_eq(res, resorig);

#test test_o7
unsigned int a = 8;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%.10o", a), sprintf(resorig, "%.10o", a));
ck_assert_pstr_eq(res, resorig);

#test test_o8
unsigned int a = 8;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%*.10o", 30, a), sprintf(resorig, "%*.10o", 30, a));
ck_assert_pstr_eq(res, resorig);

#test test_o9
unsigned int a = 8;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%*.*o", 30, 20, a), sprintf(resorig, "%*.*o", 30, 20, a));
ck_assert_pstr_eq(res, resorig);

#test test_o10
unsigned int a = 8;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%#*.*o", 30, 20, a), sprintf(resorig, "%#*.*o", 30, 20, a));
ck_assert_pstr_eq(res, resorig);

#test test_o11
unsigned int a = 8;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%-*.*o", 30, 20, a), sprintf(resorig, "%-*.*o", 30, 20, a));
ck_assert_pstr_eq(res, resorig);

#test test_o12
unsigned int a = 8;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%#-*.*o", 30, 20, a), sprintf(resorig, "%#-*.*o", 30, 20, a));
ck_assert_pstr_eq(res, resorig);

#test test_o13
unsigned int a = 8;
unsigned int b = 16;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%o", a + b), sprintf(resorig, "%o", a + b));
ck_assert_pstr_eq(res, resorig);

#test test_o14
unsigned int a = 8;
unsigned int b = 16;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%#o", a + b), sprintf(resorig, "%#o", a + b));
ck_assert_pstr_eq(res, resorig);

#test test_o15
unsigned int c = 0;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%0o", c), sprintf(resorig, "%0o", c));
ck_assert_pstr_eq(res, resorig);

#test test_o16
unsigned int c = 0;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%#0o", c), sprintf(resorig, "%#0o", c));
ck_assert_pstr_eq(res, resorig);

#test test_o17
unsigned int c = 0;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%#015o", c), sprintf(resorig, "%#015o", c));
ck_assert_pstr_eq(res, resorig);

#test test_o18
unsigned int b = 16;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%#.o", b), sprintf(resorig, "%#.o", b));
ck_assert_pstr_eq(res, resorig);

#test test_o19
short unsigned int z = 777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%ho", z), sprintf(resorig, "%ho", z));
ck_assert_pstr_eq(res, resorig);

#test test_o20
short unsigned int z = 777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%10ho", z), sprintf(resorig, "%10ho", z));
ck_assert_pstr_eq(res, resorig);

#test test_o21
short unsigned int z = 777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%010ho", z), sprintf(resorig, "%010ho", z));
ck_assert_pstr_eq(res, resorig);

#test test_o22
short unsigned int z = 777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%-10ho", z), sprintf(resorig, "%-10ho", z));
ck_assert_pstr_eq(res, resorig);

#test test_o23
short unsigned int z = 777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%.0ho", z), sprintf(resorig, "%.0ho", z));
ck_assert_pstr_eq(res, resorig);

#test test_o24
short unsigned int z = 777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%.1ho", z), sprintf(resorig, "%.1ho", z));
ck_assert_pstr_eq(res, resorig);

#test test_o25
short unsigned int z = 777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%.10ho", z), sprintf(resorig, "%.10ho", z));
ck_assert_pstr_eq(res, resorig);

#test test_o26
short unsigned int z = 777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%*.10ho", 30, z), sprintf(resorig, "%*.10ho", 30, z));
ck_assert_pstr_eq(res, resorig);

#test test_o27
short unsigned int z = 777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%-*.10ho", 30, z), sprintf(resorig, "%-*.10ho", 30, z));
ck_assert_pstr_eq(res, resorig);

#test test_o28
short unsigned int z = 777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%*.*ho", 30, 20, z), sprintf(resorig, "%*.*ho", 30, 20, z));
ck_assert_pstr_eq(res, resorig);

#test test_o29
short unsigned int z = 777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%#*.*ho", 30, 20, z), sprintf(resorig, "%#*.*ho", 30, 20, z));
ck_assert_pstr_eq(res, resorig);

#test test_o30
short unsigned int z = 777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%-*.*ho", 30, 20, z), sprintf(resorig, "%-*.*ho", 30, 20, z));
ck_assert_pstr_eq(res, resorig);

#test test_o31
short unsigned int z = 777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%#-*.*ho", 30, 20, z), sprintf(resorig, "%#-*.*ho", 30, 20, z));
ck_assert_pstr_eq(res, resorig);

#test test_o32
long unsigned int w = 777777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%lo", w), sprintf(resorig, "%lo", w));
ck_assert_pstr_eq(res, resorig);

#test test_o33
long unsigned int w = 777777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%10lo", w), sprintf(resorig, "%10lo", w));
ck_assert_pstr_eq(res, resorig);

#test test_o34
long unsigned int w = 777777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%010lo", w), sprintf(resorig, "%010lo", w));
ck_assert_pstr_eq(res, resorig);

#test test_o35
long unsigned int w = 777777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%-10lo", w), sprintf(resorig, "%-10lo", w));
ck_assert_pstr_eq(res, resorig);

#test test_o36
long unsigned int w = 777777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%.1lo", w), sprintf(resorig, "%.1lo", w));
ck_assert_pstr_eq(res, resorig);


#test test_o37
long unsigned int w = 777777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%.0lo", w), sprintf(resorig, "%.0lo", w));
ck_assert_pstr_eq(res, resorig);

#test test_o38
long unsigned int w = 777777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%.10lo", w), sprintf(resorig, "%.10lo", w));
ck_assert_pstr_eq(res, resorig);

#test test_o39
long unsigned int w = 777777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%*.10lo", 30, w), sprintf(resorig, "%*.10lo", 30, w));
ck_assert_pstr_eq(res, resorig);

#test test_o40
long unsigned int w = 777777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%-*.10lo", 30, w), sprintf(resorig, "%-*.10lo", 30, w));
ck_assert_pstr_eq(res, resorig);

#test test_o41
long unsigned int w = 777777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%*.*lo", 30, 20, w), sprintf(resorig, "%*.*lo", 30, 20, w));
ck_assert_pstr_eq(res, resorig);

#test test_o42
long unsigned int w = 777777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%#*.*lo", 30, 20, w), sprintf(resorig, "%#*.*lo", 30, 20, w));
ck_assert_pstr_eq(res, resorig);

#test test_o43
long unsigned int w = 777777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%-*.*lo", 30, 20, w), sprintf(resorig, "%-*.*lo", 30, 20, w));
ck_assert_pstr_eq(res, resorig);

#test test_o44
long unsigned int w = 777777;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%#-*.*lo", 30, 20, w), sprintf(resorig, "%#-*.*lo", 30, 20, w));
ck_assert_pstr_eq(res, resorig);

#test test_o45
long unsigned int w = 777777;
short unsigned int z = 777;
unsigned int b = 16;
char res[200];
char resorig[200];
ck_assert_int_eq(s21_sprintf(res, "%#-*.*lo %% %-15ho %.*o", 30, 20, w, z, 15, b), sprintf(resorig, "%#-*.*lo %% %-15ho %.*o", 30, 20, w, z, 15, b));
ck_assert_pstr_eq(res, resorig);
